import type { GenerateOptions } from "./index"
import { useStore } from "@/store/useStore"

const VISION_MODELS = [
  "meta-llama/llama-4-scout-17b-16e-instruct",
  "meta-llama/llama-4-maverick-17b-128e-instruct"
]

export const groqAdapter = {
  async generate(options: GenerateOptions): Promise<string> {
    const { model, prompt, negativePrompt, characterList, image } = options
    const apiKey = useStore.getState().apiKeys.groq

    if (!apiKey) {
      throw new Error("Groq API key not configured")
    }

    let messages: any[]
    if (VISION_MODELS.includes(model.id)) {
      // Vision model: send image as base64 data URL
      const base64Image = await new Promise<string>((resolve) => {
        const reader = new FileReader()
        reader.onload = () => {
          const result = reader.result as string
          resolve(result.split(",")[1]) // Remove data:image/... prefix
        }
        reader.readAsDataURL(image)
      })
      messages = [
        {
          role: "user",
          content: [
            { type: "text", text: prompt },
            { type: "image_url", image_url: { url: `data:image/jpeg;base64,${base64Image}` } },
          ],
        },
      ]
    } else {
      // Text-only model
      let fullPrompt = prompt
      if (characterList) fullPrompt += `\nCharacters: ${characterList}`
      if (negativePrompt) fullPrompt += `\nAvoid: ${negativePrompt}`
      messages = [
        { role: "system", content: "You are an expert at creating detailed recap scripts for manga/manhwa." },
        { role: "user", content: fullPrompt },
      ]
    }

    const response = await fetch("https://api.groq.com/openai/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${apiKey}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: model.id,
        messages,
        max_tokens: 1000,
        temperature: 0.7,
      }),
    })

    if (!response.ok) {
      throw new Error(`Groq API error: ${response.statusText}`)
    }

    const data = await response.json()
    console.log("Groq API response:", data)
    const choice = data.choices?.[0]
    if (!choice) return "No response generated (no choices in Groq API response)"
    if (!choice.message?.content) return "No script generated by Groq."
    return choice.message.content
  },
}
